// =========================================
// SISTEMA LIMPIO - SOLO NUEVA ESTRUCTURA
// =========================================

console.log('üöÄ [CLEAN-SYSTEM] Iniciando sistema limpio...');

// Variables globales necesarias
window.currentIdeas = {};

// Funci√≥n para mostrar notificaciones
function showNotification(message, type = 'info') {
    console.log(`[NOTIFICATION] ${type.toUpperCase()}: ${message}`);
    
    try {
        // Crear elemento de notificaci√≥n visual
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            z-index: 10000;
            max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            ${type === 'error' ? 'background: #ff4444;' : ''}
            ${type === 'warning' ? 'background: #ffaa00;' : ''}
            ${type === 'success' ? 'background: #00ff88; color: #003311;' : ''}
            ${type === 'info' ? 'background: #007AFF;' : ''}
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Remover despu√©s de 3 segundos
        setTimeout(() => {
            try {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            } catch (e) {
                console.log('[NOTIFICATION] Error al remover notificaci√≥n:', e);
            }
        }, 3000);
    } catch (error) {
        console.error('[NOTIFICATION] Error al crear notificaci√≥n:', error);
    }
}

// Funci√≥n para mostrar progreso de generaci√≥n
function showGenerationProgress(platform, typesCount) {
    console.log(`[PROGRESS] Generando para ${platform} - ${typesCount} tipos`);
    
    const progressDiv = document.createElement('div');
    progressDiv.id = 'generation-progress';
    progressDiv.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(255, 255, 255, 0.95);
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        z-index: 10001;
        text-align: center;
        color: #333;
        backdrop-filter: blur(10px);
    `;
    
    progressDiv.innerHTML = `
        <div style="font-size: 24px; margin-bottom: 15px;">ü§ñ</div>
        <h3 style="margin: 0 0 10px 0; color: #333;">Generando Ideas con IA...</h3>
        <p style="margin: 0; color: #666;">Para ${platform} ‚Ä¢ ${typesCount} tipo${typesCount > 1 ? 's' : ''}</p>
        <p style="margin: 10px 0 0 0; font-size: 12px; color: #999;">Conectando con DeepSeek API...</p>
        <div style="margin-top: 20px; width: 200px; height: 4px; background: #eee; border-radius: 2px; overflow: hidden;">
            <div style="width: 0%; height: 100%; background: linear-gradient(45deg, #667eea, #764ba2); transition: width 0.3s; animation: progress 8s ease-in-out infinite;" id="progress-bar"></div>
        </div>
    `;
    
    // Agregar animaci√≥n CSS
    const style = document.createElement('style');
    style.textContent = `
        @keyframes progress {
            0% { width: 0%; }
            25% { width: 30%; }
            50% { width: 60%; }
            75% { width: 85%; }
            100% { width: 100%; }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(progressDiv);
}

// Funci√≥n para ocultar progreso
function hideGenerationProgress() {
    const progressDiv = document.getElementById('generation-progress');
    if (progressDiv) {
        progressDiv.remove();
    }
}

// Funci√≥n para formatear el contenido del texto
function formatContentText(content) {
    return content
        // Mejorar puntuaci√≥n despu√©s de signos de interrogaci√≥n y exclamaci√≥n
        .replace(/([¬ø¬°])([A-Z])/g, '$1 $2')
        .replace(/([?!])([A-Z])/g, '$1 $2')
        
        // Asegurar espacios despu√©s de puntos
        .replace(/\.([A-Z])/g, '. $1')
        
        // Mejorar espacios alrededor de dos puntos
        .replace(/:\s*([a-zA-Z])/g, ': $1')
        
        // Saltos de l√≠nea antes de emojis al inicio de oraciones
        .replace(/([.!?])\s*([ü§îüí≠üåüüîçüí°‚ö°üî•üí∞üöÄüéØüé®üåçüíéüîÆüèÜ])/g, '$1\n\n$2')
        
        // Asegurar salto de l√≠nea despu√©s de preguntas reflexivas
        .replace(/(\?)\s*([A-Z√Å√â√ç√ì√ö√ë])/g, '$1\n\n$2')
        
        // Mejorar estructura de listas o puntos
        .replace(/\.\s*([A-Z][^.]*:)/g, '.\n\n$1')
        
        // Limpiar espacios m√∫ltiples
        .replace(/\s+/g, ' ')
        .trim();
}

// Funci√≥n para generar prompts visuales seg√∫n la plataforma
function generateVisualPrompt(platform, keyword, type, content) {
    const baseStyle = {
        'Instagram': {
            format: 'Imagen cuadrada (1080x1080)',
            style: 'Estilo feed de Instagram, colores vibrantes, alta calidad',
            elements: 'composici√≥n centrada, tipograf√≠a moderna'
        },
        'TikTok': {
            format: 'Video vertical (9:16)',
            style: 'Din√°mico, trending, Gen Z appeal',
            elements: 'movimiento, texto animado, colores llamativos'
        },
        'LinkedIn': {
            format: 'Imagen horizontal (1200x627)',
            style: 'Profesional, corporativo, limpio',
            elements: 'gr√°ficos de datos, colores sobrios, tipograf√≠a seria'
        },
        'Facebook': {
            format: 'Imagen horizontal (1200x630)',
            style: 'Familiar, accesible, colores c√°lidos',
            elements: 'f√°cil de leer, im√°genes relacionables'
        },
        'Twitter': {
            format: 'Imagen horizontal (1200x675)',
            style: 'Conciso, impactante, viral',
            elements: 'mensaje claro, contraste alto'
        }
    };
    
    const visualStyle = baseStyle[platform] || baseStyle['Instagram'];
    
    const typePrompts = {
        'Informativo y educativo': `Crea una imagen ${visualStyle.format} que muestre "${keyword}" de manera educativa. ${visualStyle.style}. Incluye ${visualStyle.elements}, iconos informativos, gr√°ficos explicativos y un dise√±o que invite al aprendizaje. El concepto debe transmitir conocimiento y curiosidad.`,
        
        'Venta directa y persuasivo': `Dise√±a una imagen ${visualStyle.format} promocional para "${keyword}" con enfoque de ventas. ${visualStyle.style}. Incorpora ${visualStyle.elements}, call-to-action visual, elementos de urgencia, y dise√±o persuasivo. Debe generar deseo de compra inmediata.`,
        
        'Posicionamiento y branding': `Crea una imagen ${visualStyle.format} de marca premium para "${keyword}". ${visualStyle.style}. Incluye ${visualStyle.elements}, logo elegante, dise√±o sofisticado y elementos que transmitan autoridad y confianza en la marca.`
    };
    
    let prompt = typePrompts[type] || typePrompts['Informativo y educativo'];
    
    // Agregar contexto espec√≠fico de la plataforma
    const platformContext = {
        'Instagram': 'Optimizado para engagement y shares en stories.',
        'TikTok': 'Debe captar atenci√≥n en los primeros 3 segundos.',
        'LinkedIn': 'Apropiado para audiencia profesional y networking.',
        'Facebook': 'Dise√±ado para generar comentarios y discusi√≥n.',
        'Twitter': 'Perfecto para retweets y conversaciones virales.'
    };
    
    prompt += ` ${platformContext[platform] || ''} Colores que complementen el tema "${keyword}" y generen impacto visual.`;
    
    return prompt;
}

// Funci√≥n para copiar al portapapeles
function copyToClipboard(ideaKey) {
    try {
        const idea = window.currentIdeas[ideaKey];
        if (!idea) return;
        
        const textToCopy = `${idea.content}\n\n${idea.hashtags}`;
        
        if (navigator.clipboard) {
            navigator.clipboard.writeText(textToCopy).then(() => {
                showNotification('‚úÖ Copiado al portapapeles', 'success');
            }).catch(err => {
                console.error('Error copiando:', err);
                fallbackCopyTextToClipboard(textToCopy);
            });
        } else {
            fallbackCopyTextToClipboard(textToCopy);
        }
    } catch (error) {
        console.error('Error en copyToClipboard:', error);
        showNotification('‚ùå Error al copiar', 'error');
    }
}

// Fallback para copiar texto
function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        if (successful) {
            showNotification('‚úÖ Copiado al portapapeles', 'success');
        } else {
            showNotification('‚ùå Error al copiar', 'error');
        }
    } catch (err) {
        console.error('Fallback: Error al copiar', err);
        showNotification('‚ùå Error al copiar', 'error');
    }
    
    document.body.removeChild(textArea);
}

// Funci√≥n para copiar prompt visual
function copyVisualPrompt(ideaKey) {
    try {
        const idea = window.currentIdeas[ideaKey];
        if (!idea || !idea.visualPrompt) return;
        
        const textToCopy = idea.visualPrompt;
        
        if (navigator.clipboard) {
            navigator.clipboard.writeText(textToCopy).then(() => {
                showNotification('‚úÖ Prompt visual copiado', 'success');
            }).catch(err => {
                console.error('Error copiando prompt:', err);
                fallbackCopyTextToClipboard(textToCopy);
            });
        } else {
            fallbackCopyTextToClipboard(textToCopy);
        }
    } catch (error) {
        console.error('Error en copyVisualPrompt:', error);
        showNotification('‚ùå Error al copiar prompt', 'error');
    }
}

// Funci√≥n para obtener red social seleccionada (con fallback robusto)
function getSelectedSocialNetworkSafe() {
    try {
        // Opci√≥n 1: Funci√≥n del carrusel
        if (typeof getSelectedSocialNetwork === 'function') {
            const network = getSelectedSocialNetwork();
            if (network && network !== 'undefined' && network !== '') {
                console.log('[CLEAN-SYSTEM] Red social desde carrusel:', network);
                return network;
            }
        }
        
        // Opci√≥n 2: Input oculto
        const hiddenInput = document.getElementById('singleSocialNetwork');
        if (hiddenInput && hiddenInput.value) {
            console.log('[CLEAN-SYSTEM] Red social desde input:', hiddenInput.value);
            return hiddenInput.value;
        }
        
        // Opci√≥n 3: Carrusel global
        if (window.socialCarousel) {
            const network = window.socialCarousel.getSelectedNetwork();
            if (network && network.name) {
                console.log('[CLEAN-SYSTEM] Red social desde window.socialCarousel:', network.name);
                return network.name;
            }
        }
        
        // Fallback
        console.log('[CLEAN-SYSTEM] Usando fallback: Facebook');
        return 'Facebook';
        
    } catch (error) {
        console.error('[CLEAN-SYSTEM] Error al obtener red social:', error);
        return 'Facebook';
    }
}

// Funci√≥n para generar prompts visuales con IA real
async function generateVisualPromptWithAI(platform, keyword, type, content) {
    console.log(`[DEEPSEEK-VISUAL] üé® Generando prompt visual con IA real...`);
    
    const DEEPSEEK_API_KEY = 'sk-195d3e74fc904857a632ee7b22b174ff';
    const API_URL = 'https://api.deepseek.com/v1/chat/completions';
    
    const systemPrompt = `Eres un experto en prompts para generaci√≥n de im√°genes y videos con IA. IMPORTANTE: Responde SIEMPRE en espa√±ol.
    Creas prompts espec√≠ficos y detallados para cada plataforma social, optimizados para herramientas como Midjourney, DALL-E, Stable Diffusion, o Runway.`;
    
    const userPrompt = `Bas√°ndote en este copywriting: "${content.substring(0, 300)}..."
    
    Genera un prompt espec√≠fico en ESPA√ëOL para crear contenido visual complementario en ${platform} sobre "${keyword}" de tipo "${type}".
    
    ESPECIFICACIONES T√âCNICAS para ${platform}:
    ${platform === 'Instagram' ? '- Formato: Imagen cuadrada 1080x1080px, estilo feed moderno y atractivo' : ''}
    ${platform === 'TikTok' ? '- Formato: Video vertical 9:16 (1080x1920px), din√°mico y llamativo para audiencia joven' : ''}
    ${platform === 'LinkedIn' ? '- Formato: Imagen horizontal 1200x628px, estilo profesional y corporativo' : ''}
    ${platform === 'Facebook' ? '- Formato: Imagen 1200x630px, estilo familiar y accesible' : ''}
    ${platform === 'Twitter' ? '- Formato: Imagen 1200x675px, impactante y memorable' : ''}
    ${platform === 'YouTube' ? '- Formato: Miniatura 1280x720px, llamativa y clara para thumbnails' : ''}
    
    El prompt debe incluir:
    - Descripci√≥n visual espec√≠fica que complemente el copywriting
    - Estilo fotogr√°fico/art√≠stico apropiado para ${platform}
    - Colores, iluminaci√≥n y composici√≥n
    - Elementos visuales que refuercen el mensaje
    - Aspectos t√©cnicos (calidad, resoluci√≥n, estilo)
    
    RESPONDE SOLO CON EL PROMPT en espa√±ol, sin explicaciones adicionales.
    Longitud: 80-120 palabras.`;
    
    const requestBody = {
        model: "deepseek-chat",
        messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: userPrompt }
        ],
        temperature: 0.6,
        max_tokens: 250,
        top_p: 0.8
    };
    
    const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
        },
        body: JSON.stringify(requestBody)
    });
    
    if (!response.ok) {
        throw new Error(`DeepSeek Visual API Error: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        throw new Error('Respuesta inv√°lida de DeepSeek Visual API');
    }
    
    console.log(`[DEEPSEEK-VISUAL] ‚úÖ Prompt visual IA generado en espa√±ol`);
    return data.choices[0].message.content.trim();
}

// Funci√≥n para generar contenido REAL con DeepSeek API
async function generateWithDeepSeek(platform, keyword, type, userContext, includeCTA) {
    console.log(`[DEEPSEEK] üöÄ Iniciando generaci√≥n REAL con IA...`);
    
    const DEEPSEEK_API_KEY = 'sk-195d3e74fc904857a632ee7b22b174ff';
    const API_URL = 'https://api.deepseek.com/v1/chat/completions';
    
    // Definir estructura espec√≠fica por plataforma
    const platformStructures = {
        'Instagram': {
            isVideo: false,
            structure: '1. GANCHO inicial llamativo, 2. DESARROLLO del concepto, 3. STORYTELLING personal, 4. HASHTAGS relevantes',
            format: 'Post cuadrado 1080x1080, texto directo y visual',
            limits: '400-500 caracteres m√°ximo'
        },
        'TikTok': {
            isVideo: true,
            structure: '1. HOOK primeros 3 segundos, 2. DESARROLLO visual din√°mico, 3. CLIMAX impactante, 4. CIERRE memorable',
            format: 'Video vertical 9:16, duraci√≥n 15-60 segundos',
            limits: 'Script para 30-45 segundos de video'
        },
        'LinkedIn': {
            isVideo: false,
            structure: '1. DECLARACI√ìN profesional, 2. CONTEXTO relevante, 3. INSIGHT valioso, 4. REFLEXI√ìN final',
            format: 'Post profesional, tono corporativo pero humano',
            limits: '600-800 caracteres recomendado'
        },
        'Facebook': {
            isVideo: false,
            structure: '1. CONEXI√ìN emocional, 2. HISTORIA relatable, 3. VALOR compartible, 4. CONVERSACI√ìN abierta',
            format: 'Post familiar y cercano, fomenta interacci√≥n',
            limits: '500-700 caracteres √≥ptimo'
        },
        'Twitter': {
            isVideo: false,
            structure: '1. DECLARACI√ìN impactante, 2. ARGUMENTO conciso, 3. DATO relevante, 4. THREAD si es necesario',
            format: 'Tweet directo y punzante',
            limits: '280 caracteres m√°ximo por tweet'
        },
        'YouTube': {
            isVideo: true,
            structure: '1. INTRO cautivadora (0-15s), 2. DESARROLLO estructurado, 3. ENGAGEMENT constante, 4. OUTRO con CTA',
            format: 'Video horizontal 16:9, gui√≥n completo',
            limits: 'Script para 5-10 minutos de contenido'
        }
    };
    
    const platformInfo = platformStructures[platform] || platformStructures['Instagram'];
    
    // Crear prompt espec√≠fico seg√∫n el tipo de contenido Y plataforma
    let systemPrompt = `Eres un copywriter experto y fil√≥sofo del comportamiento humano especializado en ${platform}. 
    IMPORTANTE: Responde SIEMPRE en espa√±ol.
    
    Tu especialidad es crear contenido que:
    - Provoca reflexi√≥n profunda y autoconocimiento
    - Desaf√≠a creencias limitantes y paradigmas establecidos
    - Conecta con las aspiraciones m√°s profundas de las personas
    - Ofrece perspectivas √∫nicas y contraintuitivas
    - Genera insights transformadores que cambian la forma de pensar
    
    ${platformInfo.isVideo ? 'Creas SCRIPTS que mantienen a la audiencia cautivada mientras aprende algo valioso.' : 'Escribes posts que la gente guarda y comparte porque les cambi√≥ la perspectiva.'}`;
    
    let userPrompt = '';
    
    switch(type) {
        case 'Informativo y educativo':
            userPrompt = `Crea un ${platformInfo.isVideo ? 'SCRIPT DE VIDEO' : 'copy educativo'} profundo para ${platform} sobre "${keyword}".
            
            ${userContext ? `CONTEXTO ESPEC√çFICO: ${userContext}` : ''}
            
            ESTRUCTURA OBLIGATORIA para ${platform}:
            ${platformInfo.structure}
            
            CRITERIOS DE CALIDAD OBLIGATORIOS:
            1. PROFUNDIDAD REAL: No uses frases gen√©ricas. Ofrece insights espec√≠ficos y contradictorios a lo que normalmente se piensa sobre ${keyword}.
            
            2. REFLEXI√ìN AUT√âNTICA: Incluye al menos 2 preguntas que obliguen a la persona a cuestionar sus creencias actuales sobre ${keyword}.
            
            3. PERSPECTIVA √öNICA: Presenta un √°ngulo que el 95% de las personas no ha considerado sobre ${keyword}.
            
            4. TRANSFORMACI√ìN PR√ÅCTICA: Ofrece una idea espec√≠fica y accionable que la persona puede implementar HOY para cambiar su relaci√≥n con ${keyword}.
            
            5. CONEXI√ìN EMOCIONAL: Conecta ${keyword} con aspiraciones profundas de crecimiento personal, prop√≥sito o autorrealizaci√≥n.
            
            ${platformInfo.isVideo ? 
                `ELEMENTOS DE VIDEO OBLIGATORIOS:
                - Hook inicial (0-5s): Una pregunta o declaraci√≥n que desaf√≠e una creencia com√∫n
                - Desarrollo (5-25s): Explicaci√≥n del insight contraintuitivo con ejemplo espec√≠fico
                - Reflexi√≥n (25-35s): Pregunta profunda que personalice el insight
                - Cierre (35-45s): Acci√≥n espec√≠fica que pueden tomar hoy` :
                `ELEMENTOS DE COPY OBLIGATORIOS:
                - Apertura disruptiva que cuestione una creencia com√∫n sobre ${keyword}
                - Desarrollo con un insight espec√≠fico y sorprendente
                - Pregunta reflexiva que personalice el concepto
                - Perspectiva pr√°ctica y accionable`}
            
            FORMATO: ${platformInfo.format}
            L√çMITE: ${platformInfo.limits}
            
            PROHIBIDO:
            - Frases clich√© como "¬øSab√≠as que...", "La mayor√≠a de personas..."
            - Consejos obvios o gen√©ricos
            - Informaci√≥n que se puede encontrar en cualquier blog b√°sico
            
            ${!includeCTA ? 'NO incluyas call-to-action, eso se agregar√° por separado.' : ''}
            
            RESPONDE EN ESPA√ëOL. Debe ser contenido que genuinamente aporte valor y haga reflexionar.`;
            break;
            
        case 'Venta directa y persuasivo':
            userPrompt = `Crea un ${platformInfo.isVideo ? 'SCRIPT DE VIDEO' : 'copy persuasivo'} poderoso para ${platform} sobre "${keyword}".
            
            ${userContext ? `CONTEXTO ESPEC√çFICO: ${userContext}` : ''}
            
            ESTRUCTURA OBLIGATORIA para ${platform}:
            ${platformInfo.structure}
            
            CRITERIOS DE PERSUASI√ìN AVANZADA:
            1. IDENTIFICACI√ìN DEL DOLOR: Describe una frustraci√≥n espec√≠fica y visceral que tu audiencia siente sobre ${keyword} (no gen√©rica).
            
            2. AGITACI√ìN INTELIGENTE: Muestra las consecuencias reales de NO actuar, usando ejemplos espec√≠ficos y calculables.
            
            3. SOLUCI√ìN CONTRAINTUITIVA: Presenta una forma de abordar ${keyword} que va contra lo que "todos hacen".
            
            4. PRUEBA ESPEC√çFICA: Incluye un resultado espec√≠fico, n√∫mero o transformaci√≥n real relacionada con ${keyword}.
            
            5. URGENCIA AUT√âNTICA: Crea sensaci√≥n de oportunidad limitada basada en factores reales del mercado o situaci√≥n.
            
            ${platformInfo.isVideo ? 
                `ELEMENTOS DE VIDEO PERSUASIVO:
                - Hook (0-3s): Problema espec√≠fico que duele
                - Agitaci√≥n (3-15s): Consecuencias de seguir igual
                - Soluci√≥n (15-30s): Enfoque contraintuitivo con prueba
                - Urgencia (30-40s): Por qu√© actuar ahora` :
                `ELEMENTOS DE COPY PERSUASIVO:
                - Apertura con problema visceral y espec√≠fico
                - Desarrollo mostrando el costo real de la inacci√≥n
                - Presentaci√≥n de la soluci√≥n contraintuitiva
                - Elemento de urgencia aut√©ntica`}
            
            FORMATO: ${platformInfo.format}
            L√çMITE: ${platformInfo.limits}
            
            PROHIBIDO:
            - "Compra ahora" o CTAs obvios
            - Promesas vagas o imposibles de medir
            - Urgencia falsa ("Solo hoy", sin justificaci√≥n real)
            
            ${!includeCTA ? 'NO incluyas call-to-action, eso se agregar√° por separado.' : ''}
            
            RESPONDE EN ESPA√ëOL. Debe ser persuasivo pero √©tico y basado en valor real.`;
            break;
            
            FORMATO: ${platformInfo.format}
            L√çMITE: ${platformInfo.limits}
            
            ${!includeCTA ? 'NO incluyas call-to-action, eso se agregar√° por separado.' : ''}
            
            RESPONDE EN ESPA√ëOL. NO uses otros idiomas.`;
            break;
            
        case 'Posicionamiento y branding':
            userPrompt = `Crea un ${platformInfo.isVideo ? 'SCRIPT DE VIDEO' : 'copy de branding'} de autoridad para ${platform} sobre "${keyword}".
            
            ${userContext ? `CONTEXTO ESPEC√çFICO: ${userContext}` : ''}
            
            ESTRUCTURA OBLIGATORIA para ${platform}:
            ${platformInfo.structure}
            
            CRITERIOS DE AUTORIDAD Y POSICIONAMIENTO:
            1. CREDIBILIDAD ESPEC√çFICA: Demuestra experiencia real en ${keyword} con un ejemplo concreto o caso espec√≠fico (no gen√©rico).
            
            2. PERSPECTIVA DIFERENCIADORA: Presenta una filosof√≠a o enfoque sobre ${keyword} que te distingue de otros en el mercado.
            
            3. LIDERAZGO DE PENSAMIENTO: Ofrece una predicci√≥n, tendencia o insight sobre el futuro de ${keyword} que otros no est√°n viendo.
            
            4. VALOR DEMOSTRABLE: Comparte un framework, proceso o metodolog√≠a espec√≠fica que usas para ${keyword}.
            
            5. POSICIONAMIENTO CLARO: Define expl√≠citamente para qui√©n ERES y para qui√©n NO ERES en el espacio de ${keyword}.
            
            ${platformInfo.isVideo ? 
                `ELEMENTOS DE VIDEO DE AUTORIDAD:
                - Apertura (0-5s): Declaraci√≥n de posicionamiento contundente
                - Credibilidad (5-20s): Ejemplo espec√≠fico o caso de √©xito
                - Diferenciaci√≥n (20-35s): Tu enfoque √∫nico sobre ${keyword}
                - Autoridad (35-45s): Insight o predicci√≥n que demuestre liderazgo` :
                `ELEMENTOS DE COPY DE AUTORIDAD:
                - Declaraci√≥n de posicionamiento clara y diferenciada
                - Demostraci√≥n de experiencia con ejemplo espec√≠fico
                - Tu metodolog√≠a o enfoque √∫nico sobre ${keyword}
                - Insight que posicione como l√≠der de pensamiento`}
            
            FORMATO: ${platformInfo.format}
            L√çMITE: ${platformInfo.limits}
            
            PROHIBIDO:
            - Lenguaje corporativo vac√≠o o clich√©s de marketing
            - Afirmaciones sin respaldo espec√≠fico
            - Posicionamiento vago o gen√©rico
            
            ${!includeCTA ? 'NO incluyas call-to-action, eso se agregar√° por separado.' : ''}
            
            RESPONDE EN ESPA√ëOL. Debe posicionar como verdadero experto con autoridad real.`;
            break;
    }
    
    const requestBody = {
        model: "deepseek-chat",
        messages: [
            {
                role: "system",
                content: systemPrompt
            },
            {
                role: "user", 
                content: userPrompt
            }
        ],
        temperature: 0.9,
        max_tokens: 800,
        top_p: 0.9
    };
    
    console.log(`[DEEPSEEK] üì§ Enviando request a API...`);
    
    const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
        },
        body: JSON.stringify(requestBody)
    });
    
    if (!response.ok) {
        throw new Error(`DeepSeek API Error: ${response.status} - ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log(`[DEEPSEEK] ‚úÖ Respuesta recibida de IA real`);
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        throw new Error('Respuesta inv√°lida de DeepSeek API');
    }
    
    const content = data.choices[0].message.content.trim();
    
    // Formatear el contenido
    const formattedContent = formatContentText(content);
    
    // Generar prompt para imagen/video seg√∫n la plataforma con IA real
    let visualPrompt;
    try {
        visualPrompt = await generateVisualPromptWithAI(platform, keyword, type, formattedContent);
    } catch (error) {
        console.log(`[DEEPSEEK] Error generando prompt visual, usando fallback`);
        visualPrompt = generateVisualPrompt(platform, keyword, type, formattedContent);
    }
    
    // Generar CTA espec√≠fico con IA real SOLO si se solicita
    let ctaContent = null;
    if (includeCTA) {
        try {
            ctaContent = await generateCTAWithAI(platform, keyword, type, formattedContent);
        } catch (error) {
            console.log(`[DEEPSEEK] Error generando CTA, usando fallback`);
            ctaContent = generateFallbackCTA(platform, type);
        }
    }
    
    console.log(`[DEEPSEEK] üéØ Contenido IA generado exitosamente`);
    
    return {
        content: formattedContent,
        platform: platform,
        copyType: type,
        generatedBy: 'ü§ñ IA Real (DeepSeek)',
        isRealAI: true,
        visualPrompt: visualPrompt,
        cta: ctaContent,
        includeCTA: includeCTA
    };
}

// Funci√≥n para generar CTA espec√≠fico con IA real
async function generateCTAWithAI(platform, keyword, type, content) {
    console.log(`[DEEPSEEK-CTA] üöÄ Generando CTA con IA real...`);
    
    const DEEPSEEK_API_KEY = 'sk-195d3e74fc904857a632ee7b22b174ff';
    const API_URL = 'https://api.deepseek.com/v1/chat/completions';
    
    const systemPrompt = `Eres un experto en calls-to-action para redes sociales. IMPORTANTE: Responde SIEMPRE en espa√±ol.
    Creas CTAs que maximizan conversi√≥n y engagement espec√≠ficos para cada plataforma.`;
    
    const userPrompt = `Bas√°ndote en este contenido: "${content.substring(0, 200)}..."
    
    Genera UN call-to-action espec√≠fico para ${platform} sobre "${keyword}" de tipo "${type}".
    
    CARACTER√çSTICAS para ${platform}:
    ${platform === 'Instagram' ? '- Invite a comentar, compartir stories, guardar post, o seguir' : ''}
    ${platform === 'TikTok' ? '- Motive a comentar, seguir, o hacer dueto/remix' : ''}
    ${platform === 'LinkedIn' ? '- Invite a conectar, compartir con red profesional, o comentar' : ''}
    ${platform === 'Facebook' ? '- Fomente conversaci√≥n, shares, o reacciones' : ''}
    ${platform === 'Twitter' ? '- Invite a retweet, comentar, o seguir el hilo' : ''}
    ${platform === 'YouTube' ? '- Motive a suscribirse, comentar, o activar notificaciones' : ''}
    
    El CTA debe:
    - Ser natural y coherente con el contenido
    - Espec√≠fico para las funciones de ${platform}
    - Crear sensaci√≥n de comunidad o valor a√±adido
    - M√°ximo 30-40 palabras
    
    RESPONDE SOLO CON EL CTA en espa√±ol, sin explicaciones.`;
    
    const requestBody = {
        model: "deepseek-chat",
        messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: userPrompt }
        ],
        temperature: 0.6,
        max_tokens: 100,
        top_p: 0.8
    };
    
    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
            },
            body: JSON.stringify(requestBody)
        });
        
        if (!response.ok) {
            throw new Error(`DeepSeek CTA API Error: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (!data.choices || !data.choices[0] || !data.choices[0].message) {
            throw new Error('Respuesta inv√°lida de DeepSeek CTA API');
        }
        
        console.log(`[DEEPSEEK-CTA] ‚úÖ CTA IA generado en espa√±ol`);
        return data.choices[0].message.content.trim();
        
    } catch (error) {
        console.log(`[DEEPSEEK-CTA] Error, usando CTA fallback:`, error);
        return generateFallbackCTA(platform, type);
    }
}

// Funci√≥n para generar CTA de respaldo
function generateFallbackCTA(platform, type) {
    const fallbackCTAs = {
        'Instagram': [
            '¬øQu√© opinas? Cu√©ntamelo en los comentarios üëá',
            'Guarda este post si te sirvi√≥ y comp√°rtelo en tus stories ‚ú®',
            'S√≠gueme para m√°s contenido como este üöÄ'
        ],
        'TikTok': [
            'Comenta si te identificas üí≠',
            'S√≠gueme para m√°s tips como este üî•',
            '¬øHar√≠as un dueto con tu opini√≥n? üé§'
        ],
        'LinkedIn': [
            '¬øCu√°l ha sido tu experiencia? Me encantar√≠a leer tu perspectiva',
            'Comparte si crees que puede ayudar a tu red profesional',
            'Conectemos para seguir intercambiando ideas'
        ],
        'Facebook': [
            'Comparte tu experiencia en los comentarios',
            'Etiqueta a alguien que necesite ver esto',
            '¬øQu√© agregar√≠as a esta reflexi√≥n?'
        ],
        'Twitter': [
            'RT si est√°s de acuerdo üîÑ',
            '¬øTu experiencia? Cu√©ntamela en los replies',
            'Hilo sobre esto pr√≥ximamente... s√≠gueme para no perd√©rtelo'
        ],
        'YouTube': [
            'Suscr√≠bete si quieres m√°s contenido as√≠',
            'Deja tu opini√≥n en los comentarios',
            'Activa la campanita para no perderte nada'
        ]
    };
    
    const ctas = fallbackCTAs[platform] || fallbackCTAs['Instagram'];
    return ctas[Math.floor(Math.random() * ctas.length)];
}

// Funci√≥n para generar ideas con IA REAL usando DeepSeek
async function generateIdeaWithAI(platform, keyword, type, userContext, includeCTA) {
    console.log(`[AI] ü§ñ Generando idea REAL con IA para ${type}...`);
    
    // Intentar con DeepSeek API primero
    try {
        return await generateWithDeepSeek(platform, keyword, type, userContext, includeCTA);
    } catch (error) {
        console.error(`[AI] Error con DeepSeek API:`, error);
        showNotification('Error con IA - usando sistema de respaldo', 'warning');
        return await generateFallbackIdea(platform, keyword, type, userContext, includeCTA);
    }
}

// Funci√≥n de respaldo con plantillas (solo cuando falla la IA real)
async function generateFallbackIdea(platform, keyword, type, userContext, includeCTA) {
    console.log(`[FALLBACK] ‚ö†Ô∏è Usando plantillas como respaldo...`);
    showNotification('Usando plantillas de respaldo - IA no disponible', 'warning');
    
    // Simular delay de procesamiento
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
    
    const templates = {
        'Informativo y educativo': [
            `ü§î ¬øTe has preguntado alguna vez c√≥mo ${keyword} podr√≠a estar transformando silenciosamente tu rutina diaria? La respuesta te sorprender√°: cada peque√±a decisi√≥n relacionada con este tema es en realidad una puerta hacia nuevas posibilidades que quiz√°s a√∫n no has explorado.`,
            
            `üí≠ Reflexionemos juntos: ¬øQu√© pasar√≠a si te dijera que todo lo que cre√≠as saber sobre ${keyword} es solo la punta del iceberg? Existe un universo de estrategias, enfoques y perspectivas que est√°n esperando a ser descubiertos por mentes curiosas como la tuya.`,
            
            `üåü Imag√≠nate por un momento esto: cada experto en ${keyword} comenz√≥ exactamente donde t√∫ est√°s ahora, con dudas, preguntas y esa sensaci√≥n de que hay algo m√°s por aprender. La diferencia no est√° en el talento natural, sino en la disposici√≥n a cuestionar lo obvio y buscar respuestas m√°s profundas.`,
            
            `üîç ¬øSab√≠as que las personas m√°s exitosas en el √°mbito de ${keyword} comparten un secreto que pocos conocen? No se trata de t√©cnicas complejas o f√≥rmulas m√°gicas, sino de una mentalidad espec√≠fica que les permite ver oportunidades donde otros ven obst√°culos.`,
            
            `üí° Aqu√≠ tienes algo en lo que pensar: si pudieras cambiar solo una cosa sobre tu enfoque hacia ${keyword}, ¬øcu√°l ser√≠a? Esta simple pregunta ha llevado a miles de personas a descubrir estrategias revolucionarias que transformaron completamente sus resultados.`
        ],
        
        'Venta directa y persuasivo': [
            `üéØ D√©jame hacerte una pregunta directa: ¬øCu√°nto tiempo m√°s vas a permitir que la incertidumbre sobre ${keyword} te mantenga alejado de los resultados que realmente deseas? Cada d√≠a que pasa sin tomar acci√≥n es una oportunidad perdida que jam√°s regresar√°.`,
            
            `‚ö° Imag√≠nate despertando ma√±ana sabiendo que finalmente tienes el control total sobre ${keyword}. ¬øC√≥mo se sentir√≠a esa confianza? ¬øQu√© cambiar√≠a en tu vida cuando ya no tengas que preocuparte por este tema nunca m√°s?`,
            
            `üî• Te voy a revelar algo que la mayor√≠a de las personas no quiere admitir: el momento perfecto para dominar ${keyword} nunca va a llegar. La √∫nica diferencia entre quienes triunfan y quienes se quedan atr√°s es la decisi√≥n de actuar a pesar de las dudas.`,
            
            `üí∞ ¬øQu√© valor le das realmente a tu tiempo? Porque mientras sigues posponiendo tu decisi√≥n sobre ${keyword}, otros est√°n aprovechando cada segundo para construir la vida que t√∫ tambi√©n podr√≠as tener. La pregunta no es si puedes permitirte invertir en esto, sino si puedes permitirte no hacerlo.`,
            
            `üöÄ Aqu√≠ est√° la verdad inc√≥moda: las excusas sobre ${keyword} que te dices a ti mismo son las mismas que se dijeron miles de personas antes que t√∫. La diferencia es que algunos decidieron dejar de justificarse y empezar a actuar. ¬øEn qu√© grupo quieres estar?`
        ],
        
        'Posicionamiento y branding': [
            `üèÜ En un mundo donde todos hablan de ${keyword}, nosotros preferimos demostrar con hechos. Nuestra filosof√≠a es simple: la excelencia no se proclama, se vive d√≠a a d√≠a en cada detalle, en cada decisi√≥n, en cada resultado que entregamos.`,
            
            `üé® ¬øQu√© diferencia a una marca memorable de una olvidable? No es solo el logo o el mensaje, sino la capacidad de conectar emocionalmente con las aspiraciones m√°s profundas de las personas. En el universo de ${keyword}, nosotros no vendemos productos, creamos experiencias transformadoras.`,
            
            `üåç Reflexiona sobre esto: en una d√©cada, ¬øc√≥mo quieres que las personas recuerden su experiencia contigo en relaci√≥n a ${keyword}? Nosotros hemos construido nuestra reputaci√≥n pensando en ese legado, en ser recordados no por lo que vendimos, sino por las vidas que cambiamos.`,
            
            `üíé La verdadera autoridad en ${keyword} no se construye con promesas vac√≠as, sino con una trayectoria s√≥lida de resultados consistentes. Cada cliente que conf√≠a en nosotros se convierte en embajador de una filosof√≠a que trasciende lo comercial: la b√∫squeda incansable de la excelencia.`,
            
            `üîÆ Imagina por un momento el futuro de ${keyword}. Nosotros no solo lo imaginamos, lo estamos construyendo activamente. Cada innovaci√≥n, cada mejora, cada nueva perspectiva que aportamos al mercado est√° dise√±ada pensando en las necesidades que a√∫n no sabes que tienes.`
        ]
    };
    
    console.log(`[LOCAL-AI] Templates disponibles:`, Object.keys(templates));
    
    const platformLimits = {
        'Twitter': 240,
        'LinkedIn': 125,
        'Facebook': 500,
        'Instagram': 400,
        'TikTok': 300
    };
    
    const baseTemplates = templates[type] || templates['Informativo y educativo'];
    console.log(`[LOCAL-AI] Usando templates para tipo: ${type}, cantidad: ${baseTemplates.length}`);
    
    let content = baseTemplates[Math.floor(Math.random() * baseTemplates.length)];
    console.log(`[LOCAL-AI] Template base seleccionado: "${content}"`);
    
    // Agregar contexto si existe
    if (userContext && userContext.trim()) {
        content += ` ${userContext.trim()}`;
        console.log(`[LOCAL-AI] Agregado contexto: "${userContext}"`);
    }
    
    // Agregar CTA si se solicita
    if (includeCTA) {
        const ctas = [
            '¬øQu√© piensas sobre esto? Me encantar√≠a conocer tu perspectiva en los comentarios.',
            'Reflexiona: ¬øc√≥mo aplicar√≠as esto en tu situaci√≥n particular? Comparte tu enfoque.',
            '¬øHas experimentado algo similar? Tu experiencia podr√≠a inspirar a otros.',
            'Pregunta para reflexionar: ¬øqu√© ser√≠a diferente en tu vida si aplicaras esto consistentemente?',
            '¬øCu√°l de estos puntos resuena m√°s contigo? Me interesa saber por qu√©.',
            'Desaf√≠o personal: ¬øte atreves a implementar esto en los pr√≥ximos 7 d√≠as?',
            '¬øQu√© obst√°culos ves para aplicar esto? Hablemos de soluciones juntos.'
        ];
        const selectedCTA = ctas[Math.floor(Math.random() * ctas.length)];
        content += ` ${selectedCTA}`;
        console.log(`[LOCAL-AI] Agregado CTA: "${selectedCTA}"`);
    }
    
    // Limitar seg√∫n la plataforma
    const limit = platformLimits[platform] || 400;
    if (content.length > limit) {
        content = content.substring(0, limit - 3) + '...';
        console.log(`[LOCAL-AI] Contenido limitado a ${limit} caracteres`);
    }
    
    // Generar hashtags relevantes
    const hashtags = generateSmartHashtags(keyword, platform, type);
    console.log(`[LOCAL-AI] Hashtags generados: "${hashtags}"`);
    
    // Generar prompt para imagen/video seg√∫n la plataforma
    const visualPrompt = generateVisualPrompt(platform, keyword, type, content);
    console.log(`[LOCAL-AI] Prompt visual generado: "${visualPrompt}"`);
    
    // Mejorar formato del contenido
    const formattedContent = formatContentText(content);
    
    const result = {
        copyType: type,
        content: formattedContent,
        hashtags: hashtags,
        platform: platform,
        visualPrompt: visualPrompt,
        generatedBy: 'üìÑ Plantilla de Respaldo',
        isTemplate: true,
        includeCTA: includeCTA,
        cta: null // Las plantillas incluyen el CTA directamente en el contenido
    };
    
    console.log(`[FALLBACK] ‚ö†Ô∏è Plantilla generada como respaldo:`, result);
    return result;
}

// Funci√≥n para generar hashtags inteligentes
function generateSmartHashtags(keyword, platform, type) {
    const baseHashtags = [`#${keyword.replace(/\s+/g, '')}`];
    
    const platformHashtags = {
        'Instagram': ['#insta', '#photo', '#viral', '#trending'],
        'TikTok': ['#fyp', '#viral', '#trending', '#tiktok'],
        'Twitter': ['#twitter', '#trending', '#viral'],
        'LinkedIn': ['#linkedin', '#professional', '#career', '#business'],
        'Facebook': ['#facebook', '#social', '#community']
    };
    
    const typeHashtags = {
        'Informativo y educativo': ['#tips', '#educational', '#learn', '#knowledge'],
        'Venta directa y persuasivo': ['#sale', '#offer', '#deal', '#limited'],
        'Posicionamiento y branding': ['#brand', '#quality', '#premium', '#leader']
    };
    
    const allHashtags = [
        ...baseHashtags,
        ...(platformHashtags[platform] || ['#social']),
        ...(typeHashtags[type] || ['#content']),
        '#marketing'
    ];
    
    // Seleccionar 4-5 hashtags aleatorios
    const selectedHashtags = [];
    const shuffled = allHashtags.sort(() => 0.5 - Math.random());
    
    for (let i = 0; i < Math.min(5, shuffled.length); i++) {
        if (!selectedHashtags.includes(shuffled[i])) {
            selectedHashtags.push(shuffled[i]);
        }
    }
    
    return selectedHashtags.join(' ');
}

// Funci√≥n fallback con ideas creativas
async function generateFallbackIdea(platform, keyword, type, userContext, includeCTA) {
    console.log(`[FALLBACK] Generando idea creativa para ${type}`);
    
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const creativeIdeas = {
        'Informativo y educativo': `ÔøΩ Aqu√≠ tienes una reflexi√≥n profunda sobre ${keyword}: cada peque√±o paso que das hacia la comprensi√≥n de este tema es en realidad una inversi√≥n en tu crecimiento personal. ${userContext ? `Especialmente considerando tu contexto: ${userContext}.` : ''} ¬øTe has preguntado c√≥mo este conocimiento podr√≠a impactar no solo tu presente, sino tambi√©n las decisiones que tomar√°s en el futuro?`,
        
        'Venta directa y persuasivo': `üéØ Seamos honestos por un momento: la diferencia entre donde est√°s ahora y donde quieres estar con respecto a ${keyword} no es casualidad, es decisi√≥n. ${userContext ? `En tu situaci√≥n espec√≠fica: ${userContext}.` : ''} La pregunta real no es si necesitas actuar, sino si est√°s dispuesto a dar el primer paso hacia la transformaci√≥n que buscas.`,
        
        'Posicionamiento y branding': `üåü En el saturado universo de ${keyword}, nosotros elegimos un camino diferente: la autenticidad por encima de las promesas vac√≠as. ${userContext ? `Entendemos particularmente situaciones como: ${userContext}.` : ''} Nuestra reputaci√≥n no se construye con marketing, sino con resultados reales en la vida de personas reales.`
    };
    
    let content = creativeIdeas[type] || creativeIdeas['Informativo y educativo'];
    
    if (includeCTA) {
        content += ` ¬øQu√© opinas? Me gustar√≠a conocer tu perspectiva sobre este enfoque.`;
    }
    
    const hashtags = generateSmartHashtags(keyword, platform, type);
    const formattedContent = formatContentText(content);
    const visualPrompt = generateVisualPrompt(platform, keyword, type, formattedContent);
    
    return {
        copyType: type,
        content: formattedContent,
        hashtags: hashtags,
        platform: platform,
        visualPrompt: visualPrompt
    };
}

// Funci√≥n principal de generaci√≥n
async function generateCopywritingClean() {
    console.log('üöÄ [CLEAN-SYSTEM] Iniciando generaci√≥n limpia...');
    
    const generateBtn = document.getElementById('generateCopyBtn');
    if (!generateBtn) {
        showNotification('‚ùå Bot√≥n de generaci√≥n no encontrado', 'error');
        return;
    }
    
    const originalText = generateBtn.textContent;
    
    try {
        // Obtener datos del formulario
        const platform = getSelectedSocialNetworkSafe();
        const keyword = document.getElementById('copyKeyword')?.value?.trim() || '';
        const copyTypes = Array.from(document.querySelectorAll('input[name="copyTypes"]:checked'))
            .map(cb => cb.value);
        const userContext = document.getElementById('copyContext')?.value?.trim() || '';
        const includeCTA = document.getElementById('includeCTA')?.checked || false;
        
        console.log('[CLEAN-SYSTEM] Datos del formulario:');
        console.log('- Plataforma:', platform);
        console.log('- Keyword:', keyword);
        console.log('- Copy Types:', copyTypes);
        console.log('- Context:', userContext);
        console.log('- Include CTA:', includeCTA);
        
        // Validaciones
        if (!keyword) {
            showNotification('‚ö†Ô∏è Por favor ingresa una palabra clave', 'warning');
            return;
        }
        
        if (copyTypes.length === 0) {
            showNotification('‚ö†Ô∏è Por favor selecciona al menos un tipo de copy', 'warning');
            return;
        }
        
        if (copyTypes.length > 3) {
            showNotification('‚ö†Ô∏è M√°ximo 3 tipos de copy permitidos', 'warning');
            return;
        }
        
        // Actualizar bot√≥n
        generateBtn.textContent = 'Generando...';
        generateBtn.disabled = true;
        
        // Mostrar progreso
        showGenerationProgress(platform, copyTypes.length);
        
        // Llamada a API de IA - Sistema robusto con m√∫ltiples alternativas
        console.log('[CLEAN-SYSTEM] Generando ideas con IA...');
        console.log('[CLEAN-SYSTEM] Tipos de copy a generar:', copyTypes);
        
        const generatedIdeas = [];
        
        for (let i = 0; i < copyTypes.length; i++) {
            const type = copyTypes[i];
            console.log(`[CLEAN-SYSTEM] Procesando tipo ${i + 1}/${copyTypes.length}: "${type}"`);
            
            try {
                const idea = await generateIdeaWithAI(platform, keyword, type, userContext, includeCTA);
                console.log(`[CLEAN-SYSTEM] Idea generada para "${type}":`, idea);
                generatedIdeas.push(idea);
            } catch (error) {
                console.error(`[CLEAN-SYSTEM] Error generando idea para ${type}:`, error);
                // Fallback con idea creativa
                const fallbackIdea = await generateFallbackIdea(platform, keyword, type, userContext, includeCTA);
                console.log(`[CLEAN-SYSTEM] Idea fallback para "${type}":`, fallbackIdea);
                generatedIdeas.push(fallbackIdea);
            }
        }
        
        console.log('[CLEAN-SYSTEM] Todas las ideas generadas:', generatedIdeas);
        const ideas = generatedIdeas;
        
        // Guardar ideas
        window.currentIdeas = {};
        ideas.forEach((idea, index) => {
            window.currentIdeas[`idea${index + 1}`] = idea;
        });
        
        // Mostrar resultados
        displayResultsClean(window.currentIdeas);
        
        const successCount = ideas.filter(idea => !idea.content.includes('Error al generar')).length;
        const errorCount = ideas.length - successCount;
        
        if (errorCount === 0) {
            showNotification(`‚úÖ ${successCount} ideas generadas exitosamente para ${platform}`, 'success');
        } else if (successCount > 0) {
            showNotification(`‚ö†Ô∏è ${successCount} ideas generadas, ${errorCount} con errores`, 'warning');
        } else {
            showNotification(`‚ùå Error generando todas las ideas. Verifica tu conexi√≥n.`, 'error');
        }
        
    } catch (error) {
        console.error('[CLEAN-SYSTEM] Error en generaci√≥n:', error);
        showNotification('‚ùå Error al generar ideas. Revisa la consola.', 'error');
    } finally {
        // Restaurar bot√≥n
        generateBtn.textContent = originalText;
        generateBtn.disabled = false;
        hideGenerationProgress();
    }
}

// Funci√≥n para mostrar resultados
function displayResultsClean(ideas) {
    console.log('[CLEAN-SYSTEM] === MOSTRANDO RESULTADOS ===');
    console.log('[CLEAN-SYSTEM] Ideas recibidas:', ideas);
    console.log('[CLEAN-SYSTEM] Tipo de ideas:', typeof ideas);
    console.log('[CLEAN-SYSTEM] Cantidad de ideas:', Object.keys(ideas).length);
    
    let resultsContainer = document.getElementById('results');
    if (!resultsContainer) {
        console.log('[CLEAN-SYSTEM] Creando contenedor de resultados...');
        // Crear contenedor de resultados si no existe
        resultsContainer = document.createElement('div');
        resultsContainer.id = 'results';
        resultsContainer.style.cssText = `
            margin-top: 30px !important;
            padding: 30px !important;
            background: #f8f9fa !important;
            border-radius: 20px !important;
            border: 2px solid #e9ecef !important;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1) !important;
            max-width: 100% !important;
            width: 100% !important;
            min-height: fit-content !important;
            height: auto !important;
            max-height: none !important;
            overflow: visible !important;
            box-sizing: border-box !important;
            word-wrap: break-word !important;
            overflow-wrap: break-word !important;
            display: flex !important;
            flex-direction: column !important;
            flex-grow: 1 !important;
        `;
        
        // Insertar despu√©s del formulario
        const form = document.getElementById('copywritingForm') || document.querySelector('form');
        if (form && form.parentNode) {
            form.parentNode.insertBefore(resultsContainer, form.nextSibling);
            console.log('[CLEAN-SYSTEM] Contenedor insertado despu√©s del formulario');
        } else {
            document.body.appendChild(resultsContainer);
            console.log('[CLEAN-SYSTEM] Contenedor agregado al body');
        }
    } else {
        console.log('[CLEAN-SYSTEM] Usando contenedor existente');
    }
    
    const ideaKeys = Object.keys(ideas);
    console.log('[CLEAN-SYSTEM] Claves de ideas:', ideaKeys);
    
    if (ideaKeys.length === 0) {
        console.log('[CLEAN-SYSTEM] No hay ideas para mostrar');
        resultsContainer.innerHTML = '<p style="color: #333; text-align: center; font-size: 16px; font-weight: bold;">No hay ideas para mostrar.</p>';
        return;
    }

    console.log('[CLEAN-SYSTEM] Generando HTML para mostrar...');
    
    let html = '<h2 style="color: #333 !important; margin-bottom: 20px; text-align: center; font-weight: bold; font-size: 24px;">üí° Ideas Generadas por IA</h2>';
    
    ideaKeys.forEach((key, index) => {
        const idea = ideas[key];
        const isError = idea.content.includes('Error al generar');
        
        console.log(`[CLEAN-SYSTEM] Procesando idea ${index + 1}:`, idea);
        
        html += `
            <div style="
                background: ${isError ? '#ffebee !important' : '#ffffff !important'};
                padding: 25px !important;
                margin: 20px 0 !important;
                border-radius: 15px !important;
                border-left: 4px solid ${isError ? '#f44336' : '#2196F3'} !important;
                transition: all 0.3s ease !important;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
                border: 1px solid #e0e0e0 !important;
                width: 100% !important;
                min-height: fit-content !important;
                height: auto !important;
                max-height: none !important;
                overflow: visible !important;
                word-wrap: break-word !important;
                overflow-wrap: break-word !important;
                box-sizing: border-box !important;
                display: flex !important;
                flex-direction: column !important;
                flex-grow: 1 !important;
            " onmouseover="this.style.transform='translateY(-3px)'; this.style.boxShadow='0 8px 25px rgba(0,0,0,0.2)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)'">
                <h3 style="
                    color: ${isError ? '#f44336' : '#1976D2'} !important; 
                    margin: 0 0 15px 0 !important; 
                    display: block !important; 
                    font-size: 18px !important; 
                    font-weight: bold !important;
                    font-family: Arial, sans-serif !important;
                    line-height: 1.4 !important;
                    word-wrap: break-word !important;
                    overflow-wrap: break-word !important;
                    white-space: normal !important;
                ">
                    ${isError ? '‚ùå' : (idea.isRealAI ? 'ü§ñ' : (idea.isTemplate ? 'üìÑ' : '‚ú®'))} ${idea.copyType}${idea.generatedBy ? ` - ${idea.generatedBy}` : ''}
                </h3>
                <p style="
                    color: #212121 !important; 
                    line-height: 1.8 !important; 
                    margin: 0 0 20px 0 !important; 
                    font-size: 16px !important; 
                    font-weight: 400 !important;
                    font-family: Arial, sans-serif !important;
                    text-align: left !important;
                    word-wrap: break-word !important;
                    overflow-wrap: break-word !important;
                    white-space: pre-line !important;
                    max-width: 100% !important;
                    min-height: fit-content !important;
                    height: auto !important;
                    overflow: visible !important;
                    hyphens: auto !important;
                    flex-grow: 1 !important;
                    display: block !important;
                ">${idea.content}${idea.cta && idea.includeCTA ? `

üöÄ ${idea.cta}` : ''}</p>
                
                ${idea.visualPrompt ? `
                <div style="
                    background: linear-gradient(135deg, #f8f9fa, #e9ecef) !important;
                    padding: 15px !important;
                    border-radius: 10px !important;
                    border-left: 3px solid #28a745 !important;
                    margin: 15px 0 !important;
                ">
                    <h4 style="
                        color: #28a745 !important;
                        margin: 0 0 10px 0 !important;
                        font-size: 14px !important;
                        font-weight: bold !important;
                        font-family: Arial, sans-serif !important;
                    ">üé® Prompt para Imagen/Video (${idea.platform}):</h4>
                    <p style="
                        color: #495057 !important;
                        font-size: 13px !important;
                        line-height: 1.6 !important;
                        margin: 0 !important;
                        font-family: Arial, sans-serif !important;
                        white-space: pre-line !important;
                    ">${idea.visualPrompt}</p>
                </div>
                ` : ''}
                
                <div style="
                    display: flex !important; 
                    flex-wrap: wrap !important;
                    justify-content: space-between !important; 
                    align-items: flex-start !important; 
                    margin-top: 20px !important; 
                    padding-top: 15px !important; 
                    border-top: 1px solid #e0e0e0 !important;
                    gap: 10px !important;
                ">
                    <p style="
                        color: #666666 !important; 
                        font-style: italic !important; 
                        margin: 0 !important; 
                        font-size: 14px !important;
                        font-family: Arial, sans-serif !important;
                        word-wrap: break-word !important;
                        overflow-wrap: break-word !important;
                        white-space: normal !important;
                        flex: 1 !important;
                        min-width: 200px !important;
                    ">${idea.hashtags}</p>
                    <div style="display: flex !important; gap: 10px !important; flex-wrap: wrap !important;">
                        ${!isError ? `<button onclick="copyToClipboard('${key}')" style="
                            background: linear-gradient(45deg, #2196F3, #1976D2) !important;
                            color: white !important;
                            border: none !important;
                            padding: 10px 16px !important;
                            border-radius: 8px !important;
                            cursor: pointer !important;
                            font-size: 12px !important;
                            font-weight: 600 !important;
                            transition: all 0.2s ease !important;
                            box-shadow: 0 2px 8px rgba(33,150,243,0.3) !important;
                            font-family: Arial, sans-serif !important;
                            white-space: nowrap !important;
                            flex-shrink: 0 !important;
                        " onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='0 4px 15px rgba(33,150,243,0.4)'" onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 2px 8px rgba(33,150,243,0.3)'">
                            üìã Copiar Copy
                        </button>` : ''}
                        ${!isError && idea.visualPrompt ? `<button onclick="copyVisualPrompt('${key}')" style="
                            background: linear-gradient(45deg, #28a745, #20c997) !important;
                            color: white !important;
                            border: none !important;
                            padding: 10px 16px !important;
                            border-radius: 8px !important;
                            cursor: pointer !important;
                            font-size: 12px !important;
                            font-weight: 600 !important;
                            transition: all 0.2s ease !important;
                            box-shadow: 0 2px 8px rgba(40,167,69,0.3) !important;
                            font-family: Arial, sans-serif !important;
                            white-space: nowrap !important;
                            flex-shrink: 0 !important;
                        " onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='0 4px 15px rgba(40,167,69,0.4)'" onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 2px 8px rgba(40,167,69,0.3)'">
                            üé® Copiar Prompt Visual
                        </button>` : ''}
                    </div>
                </div>
            </div>
        `;
    });

    console.log('[CLEAN-SYSTEM] HTML generado:', html.substring(0, 200) + '...');
    
    // Agregar estilos responsivos y de ajuste autom√°tico
    const responsiveStyle = document.createElement('style');
    responsiveStyle.innerHTML = `
        #results * {
            box-sizing: border-box !important;
            word-wrap: break-word !important;
            overflow-wrap: break-word !important;
        }
        
        #results {
            width: 100% !important;
            max-width: 100% !important;
            overflow: visible !important;
        }
        
        #results > div {
            width: 100% !important;
            max-width: 100% !important;
            min-height: auto !important;
            height: auto !important;
        }
        
        @media (max-width: 768px) {
            #results > div > div:last-child {
                flex-direction: column !important;
                align-items: flex-start !important;
                gap: 15px !important;
            }
            
            #results button {
                width: 100% !important;
                max-width: 200px !important;
            }
        }
    `;
    
    if (!document.getElementById('responsive-results-style')) {
        responsiveStyle.id = 'responsive-results-style';
        document.head.appendChild(responsiveStyle);
    }
    
    resultsContainer.innerHTML = html;
    
    // Asegurar que el contenedor sea visible
    resultsContainer.style.display = 'block';
    resultsContainer.style.visibility = 'visible';
    resultsContainer.style.opacity = '1';
    
    console.log('[CLEAN-SYSTEM] Contenido insertado en el DOM');
    
    // Scroll a resultados
    setTimeout(() => {
        resultsContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
        console.log('[CLEAN-SYSTEM] Scroll a resultados ejecutado');
    }, 100);
}

// Manejar selecci√≥n m√∫ltiple de tipos de copy
function handleCopyTypeSelectionClean() {
    const checkboxes = document.querySelectorAll('input[name="copyTypes"]');
    const maxSelections = 3;
    
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const selectedCount = document.querySelectorAll('input[name="copyTypes"]:checked').length;
            
            if (selectedCount > maxSelections) {
                this.checked = false;
                showNotification('‚ö†Ô∏è M√°ximo 3 tipos de copy permitidos', 'warning');
                return;
            }
            
            updateCopyTypeNoteClean(selectedCount);
        });
    });
}

// Actualizar nota explicativa
function updateCopyTypeNoteClean(selectedCount) {
    const noteElement = document.querySelector('.field-note');
    if (!noteElement) return;
    
    let noteText = '';
    if (selectedCount === 0) {
        noteText = 'üéØ Selecciona 1-3 tipos de copy para generar ideas variadas.';
    } else if (selectedCount === 1) {
        noteText = 'üéØ Obtendr√°s 3 variaciones del tipo seleccionado.';
    } else if (selectedCount === 2) {
        noteText = 'üéØ Obtendr√°s 2 ideas del primer tipo + 1 del segundo.';
    } else if (selectedCount === 3) {
        noteText = 'üéØ Obtendr√°s 1 idea de cada tipo seleccionado.';
    }
    
    noteElement.textContent = noteText;
}

// Inicializaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ [CLEAN-SYSTEM] DOM cargado, inicializando...');
    
    try {
        // Manejar selecci√≥n de tipos de copy
        handleCopyTypeSelectionClean();
        
        // Manejar env√≠o del formulario
        const form = document.getElementById('copywritingForm');
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                generateCopywritingClean();
            });
            console.log('‚úÖ [CLEAN-SYSTEM] Formulario configurado');
        } else {
            console.warn('[CLEAN-SYSTEM] ‚ö†Ô∏è Formulario no encontrado');
            
            // Buscar formulario con otros selectores
            const alternativeForm = document.querySelector('form');
            if (alternativeForm) {
                alternativeForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    generateCopywritingClean();
                });
                console.log('‚úÖ [CLEAN-SYSTEM] Formulario alternativo configurado');
            }
        }
        
        // Configurar bot√≥n de generar directamente
        const generateBtn = document.getElementById('generateCopyBtn');
        if (generateBtn) {
            generateBtn.addEventListener('click', function(e) {
                e.preventDefault();
                generateCopywritingClean();
            });
            console.log('‚úÖ [CLEAN-SYSTEM] Bot√≥n generar configurado');
        } else {
            console.warn('[CLEAN-SYSTEM] ‚ö†Ô∏è Bot√≥n generar no encontrado');
            
            // Buscar bot√≥n con otros selectores
            const alternativeBtn = document.querySelector('button[type="submit"], .btn-generate, .generate-btn');
            if (alternativeBtn) {
                alternativeBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    generateCopywritingClean();
                });
                console.log('‚úÖ [CLEAN-SYSTEM] Bot√≥n alternativo configurado');
            }
        }
        
        // Inicializar nota
        updateCopyTypeNoteClean(1);
        
        console.log('üéâ [CLEAN-SYSTEM] Sistema limpio inicializado correctamente');
        
    } catch (error) {
        console.error('[CLEAN-SYSTEM] Error en inicializaci√≥n:', error);
    }
});

// Exponer funciones globalmente para compatibilidad
window.showNotification = showNotification;
window.generateCopywritingClean = generateCopywritingClean;
window.displayResultsClean = displayResultsClean;
window.copyToClipboard = copyToClipboard;
window.copyVisualPrompt = copyVisualPrompt;

console.log('‚úÖ [CLEAN-SYSTEM] Script cargado correctamente');
